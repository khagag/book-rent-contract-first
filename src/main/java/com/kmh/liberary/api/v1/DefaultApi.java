/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kmh.api.v1;

import com.kmh.model.v1.AdminBooksBookIdPutRequest;
import com.kmh.model.v1.Book;
import com.kmh.model.v1.Rental;
import com.kmh.model.v1.Review;
import com.kmh.model.v1.User;
import com.kmh.model.v1.UsersRentPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-28T21:42:07.323633100+02:00[Africa/Cairo]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * PUT /admin/books/{bookId} : Update book inventory
     *
     * @param bookId  (required)
     * @param adminBooksBookIdPutRequest  (required)
     * @return Inventory updated successfully (status code 200)
     */
    @Operation(
        operationId = "adminBooksBookIdPut",
        summary = "Update book inventory",
        responses = {
            @ApiResponse(responseCode = "200", description = "Inventory updated successfully")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin/books/{bookId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> adminBooksBookIdPut(
        @Parameter(name = "bookId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Integer bookId,
        @Parameter(name = "AdminBooksBookIdPutRequest", description = "", required = true) @Valid @RequestBody AdminBooksBookIdPutRequest adminBooksBookIdPutRequest
    );


    /**
     * POST /admin/books : Add a new book
     *
     * @param book  (required)
     * @return Book added successfully (status code 201)
     */
    @Operation(
        operationId = "adminBooksPost",
        summary = "Add a new book",
        responses = {
            @ApiResponse(responseCode = "201", description = "Book added successfully")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin/books",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> adminBooksPost(
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    );


    /**
     * GET /admin/rentals : Get all rented books
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "adminRentalsGet",
        summary = "Get all rented books",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rental.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin/rentals",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Rental>> adminRentalsGet(
        
    );


    /**
     * GET /admin/users : Get all users
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "adminUsersGet",
        summary = "Get all users",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<User>> adminUsersGet(
        
    );


    /**
     * GET /books/{bookId} : Get book details
     *
     * @param bookId  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "booksBookIdGet",
        summary = "Get book details",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Book> booksBookIdGet(
        @Parameter(name = "bookId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Integer bookId
    );


    /**
     * GET /books : List all books
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "booksGet",
        summary = "List all books",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Book.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Book>> booksGet(
        
    );


    /**
     * POST /users/rent : Rent a book
     *
     * @param usersRentPostRequest  (required)
     * @return Book rented successfully (status code 200)
     */
    @Operation(
        operationId = "usersRentPost",
        summary = "Rent a book",
        responses = {
            @ApiResponse(responseCode = "200", description = "Book rented successfully")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/rent",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> usersRentPost(
        @Parameter(name = "UsersRentPostRequest", description = "", required = true) @Valid @RequestBody UsersRentPostRequest usersRentPostRequest
    );


    /**
     * GET /users/rents : Get user&#39;s rented books
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "usersRentsGet",
        summary = "Get user's rented books",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rental.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/rents",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Rental>> usersRentsGet(
        
    );


    /**
     * POST /users/reviews : Add a book review
     *
     * @param review  (required)
     * @return Review added successfully (status code 201)
     */
    @Operation(
        operationId = "usersReviewsPost",
        summary = "Add a book review",
        responses = {
            @ApiResponse(responseCode = "201", description = "Review added successfully")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/reviews",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> usersReviewsPost(
        @Parameter(name = "Review", description = "", required = true) @Valid @RequestBody Review review
    );

}
